# Generated by InsightCopilot - Version 1.39
from pathlib import Path
from airflow import DAG
from datetime import datetime, timedelta
from workflow_framework import framework
from workflow_framework.config import *
from workflow_framework import callbacks

workflow = 'na-policy-hist-db-edw-csv-to-text-load'
config_file = 'config.yaml'
config_path = 'na/policy/history/tables/db_edw_csv_to_text/load/'
path = Path(__file__).with_name(config_file)
framework = framework.Framework(workflow, config_path)
ops_emails = ['ops@abc.com']
tags = ['History','Policy','P3','S3', 'Tables']
sla_mins = 30
priority = 'P3'

def failure_callback(context):
    callbacks.failure_callback(context, config_path, workflow, priority)

def sla_miss_callback(context):
    callbacks.sla_miss_callback(context, workflow, priority)

# Create the DAG
with DAG(workflow,
         default_args={
             'retries': 0,
             'email': ops_emails,
             'email_on_failure': False,
             'email_on_retry': False,
             'sla': timedelta(minutes=int(sla_mins)),
         },
         description=workflow,
         schedule_interval=None,
         start_date=datetime(2022, 1, 1),
         catchup=False,
         on_failure_callback = failure_callback,
         sla_miss_callback = sla_miss_callback,
         tags=tags,
         max_active_runs=1
         ) as dag:

# Define workflow tasks
    start = framework.build_task('START','start')
    csv_to_text = framework.build_task('DB_TO_TEXT','csv_to_text')
    end = framework.build_task('END','end')


# Setup the task flow
    start >> csv_to_text
    csv_to_text >> end

